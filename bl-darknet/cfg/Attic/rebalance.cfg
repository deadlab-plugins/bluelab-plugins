# See: "Monoaural Audio Source Separation Using Deep Convolutional Neural Networks" - Pritish Chandna
# https://github.com/MTG/DeepConvSep/blob/master/examples/dsd100/separate_dsd.py

# changes:
#
# for memory:
# - filters 50 => 20
# - conv/deconv: 1025 => 129
#
# for time:
# - filters 50 => 8

[net]
# Training
width=1024
height=32

# multichannel
channels=4
#channels=1

learning_rate=0.01

# TODO: test this
#learning_rate=0.00001

#?
batch=1 
momentum=0.9
# ?
decay=0.0001 
adam=1

# TODO: implement it in darknet
clip=0.9 

B1=0.9
B2=0.999
eps=1e-7

max_batches = 10000000

#policy=constant

#0
[input]

#1
[batchnorm]

#2
[convolutional2] 
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
activation=relu

#3
[batchnorm]

#4
[convolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
activation=relu

#5
[batchnorm]

#6
[dense]
#units=256
units=128

# new
#[batchnorm]
#[dropout]
#probability=0.5

########## source0
#7
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
units=131072
#channels=1

#8
[reorg2]
reverse=1
stride_x=1024
stride_y=32
#channels=4
#channels=1

#9
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#10
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#11
[split]
channel=0

#### end source0

########## source1
#12
[route]
layers=6

#13
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
units=131072
#channels=1

#14
[reorg2]
reverse=1
stride_x=1024
stride_y=32
#channels=4
#channels=1

#15
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#16
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#17
[split]
channel=1

#### end source1

########## source2
#18
[route]
layers=6

#19
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
units=131072
#channels=1

#20
[reorg2]
reverse=1
stride_x=1024
stride_y=32
#channels=4
#channels=1

#21
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#22
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#23
[split]
channel=2

#### end source2

########## source3
#24
[route]
layers=6

#25
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
units=131072
#channels=1

#26
[reorg2]
reverse=1
stride_x=1024
stride_y=32
#channels=4
#channels=1

#27
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#28
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#29
[split]
channel=3

#### end source 3

#30
[route]
#layers=9,14,19,24
#layers=10,15,20,25
layers=11,17,23,29

# dummy
#[convolutional2] 
#filters=4
#size_x=1
#size_y=1
#stride_x=1
#stride_y=1
#pad=1
#activation=relu

#31
[metrics]
# TODO: test again L1Mask
#type_cost=L1mask
type_cost=MSEmask
type_acc=MSEmask
mean=1
