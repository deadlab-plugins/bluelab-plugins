# See: "Monoaural Audio Source Separation Using Deep Convolutional Neural Networks" - Pritish Chandna
# https://github.com/MTG/DeepConvSep/blob/master/examples/dsd100/separate_dsd.py

# changes:
#
# for memory:
# - filters 50 => 20
# - conv/deconv: 1025 => 129
#
# for time:
# - filters 50 => 8

[net]
# Training
width=1024
height=32

# multichannel
channels=4
#channels=1

# origin
#learning_rate=0.01

# test
#learning_rate=0.1

# testd this
learning_rate=0.00001

#?
batch=1 
momentum=0.9
# ?
decay=0.0001 
adam=1

# TODO: implement it in darknet
clip=0.9 

B1=0.9
B2=0.999
eps=1e-7

max_batches = 10000000

#policy=constant

#0
#[input]

# must take only 1 channel of the input gray image (r=g=b=a)
# otherwise the first convolution won't work well
# (would have 4 times the same filter)
#0
[split]
channel=1

#1
[batchnorm]

#2
[convolutional2] 
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
activation=relu

#3
[batchnorm]

#4
[convolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
activation=relu

#5
[batchnorm]

# contraction
# DeepConvSep set it to small value
# Pepino sets to 1024
#
# In any case, we must set 128 or 512 values, here or in each branch.
# Expl: Since we have 1 channel input (instead of 4), there must be a factor of
# 4 between the pairs of dense layers (either 512->128, or 128->512).
# Otherwise we get empty weights for deconvolution
#6 
[dense]
#units=256
#units=1024
units=128
#units=512

# new
#[batchnorm]
#[dropout]
#probability=0.5

########## source0
# DeepConvSep says to set the second dense dimensions to the ones of the previous conv (the second one)
# Pepino sets to smaller value, for real-time
#7
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
#channels=1
#units=131072
#units=128
units=512

#
#[reorg2]
#reverse=1
#stride_x=1024
#stride_y=32
##channels=4
##channels=1

#8
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#9
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#10
[split]
channel=0

#### end source0

########## source1
#11
[route]
layers=6

#12
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
#channels=1
#units=131072
#units=128
units=512

#
#[reorg2]
#reverse=1
#stride_x=1024
#stride_y=32
##channels=4
##channels=1

#13
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#14
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#15
[split]
channel=1

#### end source1

########## source2
#16
[route]
layers=6

#17
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
#channels=1
#units=131072
#units=128
units=512

#
#[reorg2]
#reverse=1
#stride_x=1024
#stride_y=32
##channels=4
##channels=1

#18
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#19
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#20
[split]
channel=2

#### end source2

########## source3
#21
[route]
layers=6

#22
[dense]
# 1024*32*50: 1638400
# 1024*32*20: 655360
# 1024*32*10: 327680
# 1024*32*8: 262144
# 1024*32*4: 131072
# 1024*32: 32768
#units=32768
#channels=1
#units=131072
#units=128
units=512

#
#[reorg2]
#reverse=1
#stride_x=1024
#stride_y=32
##channels=4
##channels=1

#23
[deconvolutional2] 
filters=4
size_x=1
#size_y=17
#size_y=9
size_y=5
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#24
[deconvolutional2] 
#filters=1
filters=4
#size_x=1025
#size_x=129
#size_x=65
size_x=33
size_y=1
stride_x=1
stride_y=1
pad=1
padding_x=1
padding_y=1
activation=relu
##out_padding_x=1
##out_padding_y=1

#25
[split]
channel=3

#### end source3

#26
[route]
#layers=9,14,19,24
#layers=10,15,20,25
#layers=11,17,23,29

layers=10,15,20,25

#27 #very important!
[batchnorm]

#28
[metrics]
# used successfully for prev unet
# but here, it doesn't work..
#type_cost=L1mask

# used by Pepino
# => works the best!
type_cost=MSEmask
type_acc=MSEmask
